"use strict";

function _classCallCheck(e, t) {
  if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
}var _createClass = function () {
  function e(e, t) {
    for (var r = 0; r < t.length; r++) {
      var s = t[r];s.enumerable = s.enumerable || !1, s.configurable = !0, "value" in s && (s.writable = !0), Object.defineProperty(e, s.key, s);
    }
  }return function (t, r, s) {
    return r && e(t.prototype, r), s && e(t, s), t;
  };
}();!function (e, t, r) {
  var s = function () {
    function s(e) {
      return _classCallCheck(this, s), this.selector = t.querySelectorAll(e), this;
    }return _createClass(s, [{ key: "find", value: function value(e) {
        return this.selector = this.selector[0].querySelectorAll(e), this;
      } }, { key: "eq", value: function value(e) {
        return this.selector = [this.selector[e]], this;
      } }, { key: "_each", value: function value() {
        for (var e = this.selector, t = 0; t < e.length; t += 1) {
          this.selector = [e[t]];for (var r = [], s = 1; s < arguments.length; s += 1) {
            r.push(arguments[s]);
          }arguments[0].apply(this, r);
        }
      } }, { key: "offset", value: function value() {
        var e = this.selector[0].getBoundingClientRect(),
            t = e.top,
            r = e.right,
            s = e.bottom,
            n = e.left,
            i = e.width,
            l = e.height;return { top: t, right: r, bottom: s, left: n, width: i, height: l };
      } }, { key: "attr", value: function value(e) {
        var t = arguments.length <= 1 || arguments[1] === r ? null : arguments[1];if (this.selector.length > 1) this._each(this.attr, e, t);else {
          if (!t) {
            var s;switch (e) {case "class":
                s = this.selector[0].className;break;case "for":
                s = this.selector[0].htmlFor;break;case "value":
                s = this.selector[0].value;}return s;
          }this.selector[0].setAttribute(e, t);
        }
      } }, { key: "parent", value: function value() {
        return this.selector = [this.selector[0].parentNode], this;
      } }, { key: "children", value: function value() {
        var e = [],
            t = this.selector[0].childNodes;for (var r in t) {
          1 === t[r].nodeType && e.push(t[r]);
        }return this.selector = e, this;
      } }, { key: "next", value: function value() {
        return this.selector = [this.selector[0].nextSibling], this;
      } }, { key: "previous", value: function value() {
        this.selector = [this.selector[0].previousSibling];
      } }, { key: "css", value: function value(t) {
        if ("string" == typeof t) {
          if (!arguments[1]) return e.getComputedStyle(this.selector[0])[t];this.selector[0].style[t] = arguments[1];
        } else for (var r in t) {
          this.selector[0].style[r] = t[r];
        }return this;
      } }, { key: "addClass", value: function value(e) {
        if (this.attr("class").indexOf(e) < 0) {
          var t = this.attr("class").split(" ");t.push(e), this.attr("class", t.join(" "));
        }return this;
      } }, { key: "removeClass", value: function value(e) {
        var t = this.attr("class").indexOf(e);if (t > 0) {
          var r = this.attr("class").split(" ");r.splice(r.indexOf(e), 1), this.attr("class", r.join(" "));
        }return this;
      } }, { key: "hasClass", value: function value(e) {
        return this.attr("class").split(" ").indexOf(e) < 0 ? !1 : this;
      } }, { key: "copy", value: function value() {
        return [this.selector[0].cloneNode(!0)];
      } }, { key: "create", value: function value(e) {
        var r = t.createElement("div");return r.insertAdjacentHTML("beforeend", e), this.children.call({ selector: [r] });
      } }, { key: "append", value: function value(e) {
        return this.selector[0].insertAdjacentHTML("beforeend", e), this;
      } }, { key: "prepend", value: function value(e) {
        return this.selector[0].insertAdjacentHTML("afterbegin", e), this;
      } }, { key: "after", value: function value(e) {
        return this.selector[0].insertAdjacentHTML("afterend", e), this;
      } }, { key: "before", value: function value(e) {
        return this.selector[0].insertAdjacentHTML("beforebegin", e), this;
      } }, { key: "replace", value: function value(e) {
        return this.selector[0].parentNode.replaceChild(e.selector[0], this.selector[0]), this.selector[0] = e, this;
      } }, { key: "remove", value: function value() {
        this.selector[0].parentNode.removeChild(this.selector[0]);
      } }]), s;
  }();e.$ = function (e) {
    return new s(e);
  };
}(window, document);
